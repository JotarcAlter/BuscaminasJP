{"ast":null,"code":"export class CasillaService {\n  buildBoard(rows, columns, numberOfMines) {\n    let board = [];\n    for (let i = 0; i < rows; i++) {\n      let rows = [];\n      for (let j = 0; j < columns; j++) {\n        let element = {\n          status: 'toOpen',\n          mine: false,\n          mineProximity: 0,\n          contenido: \"0\"\n        };\n        rows.push(element);\n      }\n      board.push(rows);\n    }\n    this.putMines(numberOfMines, board, rows, columns);\n    this.GetMineProximity(board, rows, columns);\n    return board;\n  }\n  putMines(numberOfMines, board, rows, columns) {\n    let set = new Set();\n    let i = 0;\n    while (i < numberOfMines) {\n      let pairs = [Math.floor(Math.random() * rows), Math.floor(Math.random() * columns)];\n      if (!set.has(pairs) && !board[pairs[0]][pairs[1]].mine) {\n        set.add(pairs);\n        board[pairs[0]][pairs[1]].mine = true;\n        i++;\n      }\n    }\n    return board;\n  }\n  GetMineProximity(board, rows, columns) {\n    const CASILLAS_ADYACENTES = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let mines = 0;\n        for (const pair of CASILLAS_ADYACENTES) {\n          if (!this.isValid(i + pair[0], j + pair[1], rows, columns)) {\n            continue;\n          }\n          if (board[i + pair[0]][j + pair[1]].mine) {\n            mines++;\n          }\n        }\n        board[i][j].mineProximity = mines;\n      }\n    }\n    return board;\n  }\n  gameOver(board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j].mine) {\n          board[i][j].status = 'mine';\n        }\n      }\n    }\n  }\n  changeDifficulty(difficulty) {\n    let rows,\n      columns = 5;\n    let numberOfMines = 1;\n    if (difficulty == \"Alevin\") {\n      rows = columns = 8;\n      numberOfMines = 10;\n    } else if (difficulty == \"Cadete\") {\n      rows = columns = 13;\n      numberOfMines = 20;\n    } else if (difficulty == \"Professional\") {\n      rows = columns = 15;\n      numberOfMines = 40;\n    } else {\n      rows = columns = 15;\n      numberOfMines = 90;\n    }\n    return [rows, columns, numberOfMines];\n  }\n  getDifficultys() {\n    return [\"Alevin\", \"Cadete\", \"Professional\", \"Estrella\"];\n  }\n  checkCasilla(board, row, column, CasillasGame, numberOfMines) {\n    if (board[row][column].mine) {\n      board[row][column].status = 'mine';\n      this.gameOver(board);\n      console.log(\"Perdiste\");\n    } else if (CasillasGame.CasillasOpened >= CasillasGame.Casillas - CasillasGame.numberMines) {\n      console.log(\"Ganaste\");\n    }\n  }\n  isValid(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  openCasilla(board, row, column, rows, columns, CasillasGame, PnumberOfFlags) {\n    if (!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine) {\n      return;\n    } else if (board[row][column].mineProximity != 0) {\n      if (board[row][column].status == 'flag') {\n        PnumberOfFlags.flags += 1;\n      }\n      board[row][column].status = 'open';\n      CasillasGame.CasillasOpened += 1;\n    } else if (board[row][column].mineProximity == 0) {\n      if (board[row][column].status == 'flag') {\n        PnumberOfFlags.flags += 1;\n      }\n      board[row][column].status = 'open';\n      CasillasGame.CasillasOpened += 1;\n      this.openCasilla(board, row + 1, column, rows, columns, CasillasGame, PnumberOfFlags);\n      this.openCasilla(board, row - 1, column, rows, columns, CasillasGame, PnumberOfFlags);\n      this.openCasilla(board, row, column + 1, rows, columns, CasillasGame, PnumberOfFlags);\n      this.openCasilla(board, row, column - 1, rows, columns, CasillasGame, PnumberOfFlags);\n      this.openCasilla(board, row + 1, column + 1, rows, columns, CasillasGame, PnumberOfFlags);\n      this.openCasilla(board, row - 1, column - 1, rows, columns, CasillasGame, PnumberOfFlags);\n      this.openCasilla(board, row - 1, column + 1, rows, columns, CasillasGame, PnumberOfFlags);\n      this.openCasilla(board, row + 1, column - 1, rows, columns, CasillasGame, PnumberOfFlags);\n    }\n  }\n  flag(Casilla) {\n    if (Casilla.status == 'toOpen') {\n      Casilla.status = 'flag';\n    } else if (Casilla.status == 'flag') {\n      Casilla.status = 'toOpen';\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["CasillaService","buildBoard","rows","columns","numberOfMines","board","i","j","element","status","mine","mineProximity","contenido","push","putMines","GetMineProximity","set","Set","pairs","Math","floor","random","has","add","CASILLAS_ADYACENTES","mines","pair","isValid","gameOver","length","changeDifficulty","difficulty","getDifficultys","checkCasilla","row","column","CasillasGame","console","log","CasillasOpened","Casillas","numberMines","openCasilla","PnumberOfFlags","flags","flag","Casilla"],"sourceRoot":"","sources":["C:\\Users\\JUAN PABLO\\Desktop\\BuscaminasJP\\BuscaMinas\\src\\app\\services\\Cell.ts"],"sourcesContent":["import { Casilla } from \"../models/Cell\";\n\n\nexport class CasillaService{\n\n    buildBoard(rows: number, columns: number, numberOfMines: number) : Casilla[][]{\n\n        let board: Casilla[][] = []\n        for(let i = 0; i < rows; i++){\n            let rows: Casilla[] = [];\n            for(let j = 0; j < columns; j++){\n              let element: Casilla = {status: 'toOpen', mine: false, mineProximity: 0, contenido: \"0\"};\n              rows.push(element);\n            }\n            board.push(rows);\n        }\n\n\n        this.putMines(numberOfMines, board, rows, columns);\n        this.GetMineProximity(board, rows, columns);\n\n        return board;\n    }\n\n\n    putMines(numberOfMines: number, board: Casilla[][], rows: number, columns: number) : Casilla[][]{\n        let set = new Set<([number, number])>;\n        let i: number = 0;\n\n        while(i < numberOfMines){\n            let pairs: [number, number] = [Math.floor(Math.random() * (rows)), Math.floor(Math.random() * (columns))];\n\n            if(!set.has(pairs) && !board[pairs[0]][pairs[1]].mine){\n                set.add(pairs);\n                board[pairs[0]][pairs[1]].mine = true;\n                i++;\n            }\n        }\n\n        return board;\n    }\n\n\n    GetMineProximity(board: Casilla[][], rows: number, columns: number) : Casilla[][]{\n        \n        const CASILLAS_ADYACENTES: number[][] = [\n                                    [1, 1],\n                                    [-1, -1],\n                                    [-1, 1],\n                                    [1, -1],\n                                    [1, 0],\n                                    [-1, 0],\n                                    [0, 1],\n                                    [0, -1]\n        ];\n\n        \n        for(let i = 0; i < rows; i++){\n            for(let j = 0; j < columns; j++){\n                let mines: number = 0;\n                for(const pair of CASILLAS_ADYACENTES){\n                    if(!this.isValid(i + pair[0], j + pair[1], rows, columns)){\n                        continue;\n                    }\n                    \n                    if(board[i + pair[0]][ j + pair[1]].mine){\n                        mines++;\n                    }\n                }\n\n                board[i][j].mineProximity = mines;\n            }\n        }\n\n        return board;\n\n    }\n\n\n    gameOver(board: Casilla[][]){\n        for(let i = 0; i < board.length; i++){\n            for(let j = 0; j < board[i].length; j++){\n                if(board[i][j].mine){\n                    board[i][j].status = 'mine';\n                }\n            }\n        }\n    }\n\n\n    changeDifficulty(difficulty: string) : [number, number, number]{\n\n        let rows, columns = 5;\n        let numberOfMines = 1;\n        if(difficulty == \"Alevin\"){\n            rows = columns = 8;\n            numberOfMines = 10;\n        }\n        else if(difficulty == \"Cadete\"){\n            rows = columns = 13;\n            numberOfMines = 20;\n        }\n        else if(difficulty == \"Professional\"){\n            rows = columns = 15;\n            numberOfMines = 40;\n        }\n        else{\n            rows = columns = 15;\n            numberOfMines = 90;\n        }\n\n\n        return [rows, columns, numberOfMines];\n    }\n\n\n    getDifficultys() : string[]\n    {\n        return [\"Alevin\", \"Cadete\", \"Professional\", \"Estrella\"];\n    }\n\n   checkCasilla(board: Casilla[][], row: number, column: number, CasillasGame: any, numberOfMines: number) {\n        \n       if(board[row][column].mine){\n           board[row][column].status = 'mine';\n           this.gameOver(board);\n           console.log(\"Perdiste\")\n       }\n       else if((CasillasGame.CasillasOpened) >= (CasillasGame.Casillas - CasillasGame.numberMines)){\n            console.log(\"Ganaste\")\n       }\n\n    }\n\n\n    isValid(i: number, j: number, rows: number, columns: number) : boolean{\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\n            return false;\n        }\n\n        return true;\n    }\n\n    openCasilla(board: Casilla[][],row: number, column: number, rows: number, columns: number, CasillasGame: any, PnumberOfFlags: any) : void {\n        if(!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine){\n            return;\n        }\n        else if(board[row][column].mineProximity != 0){\n            if(board[row][column].status == 'flag'){\n                PnumberOfFlags.flags += 1;\n            }\n            board[row][column].status = 'open';\n            CasillasGame.CasillasOpened += 1;\n        }\n        else if(board[row][column].mineProximity == 0){\n    \n            if(board[row][column].status == 'flag'){\n                PnumberOfFlags.flags += 1;\n            }\n            board[row][column].status = 'open';\n            CasillasGame.CasillasOpened += 1;\n            this.openCasilla(board, row + 1, column, rows, columns, CasillasGame, PnumberOfFlags);\n            this.openCasilla(board, row - 1, column, rows, columns, CasillasGame, PnumberOfFlags);\n            this.openCasilla(board, row, column + 1, rows, columns, CasillasGame, PnumberOfFlags);\n            this.openCasilla(board, row, column - 1, rows, columns, CasillasGame, PnumberOfFlags);\n\n            this.openCasilla(board, row + 1, column + 1, rows, columns, CasillasGame, PnumberOfFlags);\n            this.openCasilla(board, row - 1, column - 1, rows, columns, CasillasGame, PnumberOfFlags);\n            this.openCasilla(board, row - 1, column + 1, rows, columns, CasillasGame, PnumberOfFlags);\n            this.openCasilla(board, row + 1, column - 1, rows, columns, CasillasGame, PnumberOfFlags);\n        }\n    }\n\n    flag(Casilla: Casilla) : void{\n        if(Casilla.status == 'toOpen'){\n            Casilla.status = 'flag';\n        }\n        else if(Casilla.status == 'flag'){\n            Casilla.status = 'toOpen';\n        }\n    }\n\n\n    \n\n\n    \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}