{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet BoardComponent = class BoardComponent {\n  constructor(cellService) {\n    this.cellService = cellService;\n    this.board = [];\n    this.rows = 5;\n    this.columns = 5;\n    this.numberOfMines = this.numberOfFlags = 0;\n    this.difficulty = \"Alevin\";\n    this.cellsGame = {\n      cellsOpened: 0,\n      cells: this.rows * this.columns,\n      numberMines: this.numberOfMines\n    };\n    this.changeDifficulty();\n  }\n  checkCell(row, column) {\n    let PnumberOfFlags = {\n      flags: 0\n    };\n    if (this.board[row][column].status != 'flag') {\n      this.cellService.openCasilla(this.board, row, column, this.rows, this.columns, this.cellsGame, PnumberOfFlags);\n      this.numberOfFlags += PnumberOfFlags.flags;\n      this.cellService.checkCasilla(this.board, row, column, this.cellsGame, this.numberOfMines);\n    }\n  }\n  flag(cell) {\n    this.cellService.flag(cell);\n    if (cell.status == 'ToOpen') {\n      this.numberOfFlags++;\n    } else if (cell.status == 'flag') {\n      this.numberOfFlags--;\n    }\n    return false;\n  }\n  reset() {\n    this.board = this.cellService.buildBoard(this.rows, this.columns, this.numberOfMines);\n    this.cellsGame = {\n      cellsOpened: 0,\n      cells: this.rows * this.columns,\n      numberMines: this.numberOfMines\n    };\n    this.numberOfFlags = this.numberOfMines;\n  }\n  getDifficultys() {\n    return this.cellService.getDifficultys();\n  }\n  changeDifficulty() {\n    let changes = this.cellService.changeDifficulty(this.difficulty);\n    this.rows = changes[0];\n    this.columns = changes[1];\n    this.numberOfMines = this.numberOfFlags = changes[2];\n    this.reset();\n  }\n};\nBoardComponent = __decorate([Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})], BoardComponent);\nexport { BoardComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAYzBC,YAAoBC,WAA2B;IAA3B,gBAAW,GAAXA,WAAW;IAV/B,UAAK,GAAgB,EAAE;IAWrB,IAAI,CAACC,IAAI,GAAE,CAAC;IACZ,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,aAAa,GAAG,IAAI,CAACC,aAAa,GAAG,CAAC;IAC3C,IAAI,CAACC,UAAU,GAAG,QAAQ;IAC1B,IAAI,CAACC,SAAS,GAAG;MAACC,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE,IAAI,CAACP,IAAI,GAAG,IAAI,CAACC,OAAO;MAAEO,WAAW,EAAE,IAAI,CAACN;IAAa,CAAC;IACnG,IAAI,CAACO,gBAAgB,EAAE;EACzB;EAGAC,SAAS,CAACC,GAAW,EAAEC,MAAc;IACnC,IAAIC,cAAc,GAAQ;MAACC,KAAK,EAAE;IAAC,CAAC;IACpC,IAAG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,CAACC,MAAM,CAAC,CAACI,MAAM,IAAI,MAAM,EAAC;MAC1C,IAAI,CAACjB,WAAW,CAACkB,WAAW,CAAC,IAAI,CAACF,KAAK,EAAEJ,GAAG,EAAEC,MAAM,EAAE,IAAI,CAACZ,IAAI,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACI,SAAS,EAAEQ,cAAc,CAAC;MAC9G,IAAI,CAACV,aAAa,IAAIU,cAAc,CAACC,KAAK;MAC1C,IAAI,CAACf,WAAW,CAACmB,YAAY,CAAC,IAAI,CAACH,KAAK,EAAEJ,GAAG,EAAEC,MAAM,EAAE,IAAI,CAACP,SAAS,EAAE,IAAI,CAACH,aAAa,CAAC;;EAE9F;EAEAiB,IAAI,CAACC,IAAa;IAChB,IAAI,CAACrB,WAAW,CAACoB,IAAI,CAACC,IAAI,CAAC;IAE3B,IAAGA,IAAI,CAACJ,MAAM,IAAI,QAAQ,EAAC;MACzB,IAAI,CAACb,aAAa,EAAE;KACrB,MACI,IAAGiB,IAAI,CAACJ,MAAM,IAAI,MAAM,EAAC;MAC5B,IAAI,CAACb,aAAa,EAAE;;IAItB,OAAO,KAAK;EACd;EAGAkB,KAAK;IACH,IAAI,CAACN,KAAK,GAAG,IAAI,CAAChB,WAAW,CAACuB,UAAU,CAAC,IAAI,CAACtB,IAAI,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,aAAa,CAAC;IACrF,IAAI,CAACG,SAAS,GAAG;MAACC,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE,IAAI,CAACP,IAAI,GAAG,IAAI,CAACC,OAAO;MAAEO,WAAW,EAAE,IAAI,CAACN;IAAa,CAAC;IACnG,IAAI,CAACC,aAAa,GAAG,IAAI,CAACD,aAAa;EACzC;EAEAqB,cAAc;IACZ,OAAO,IAAI,CAACxB,WAAW,CAACwB,cAAc,EAAE;EAC1C;EAGAd,gBAAgB;IACd,IAAIe,OAAO,GAA6B,IAAI,CAACzB,WAAW,CAACU,gBAAgB,CAAC,IAAI,CAACL,UAAU,CAAC;IAC1F,IAAI,CAACJ,IAAI,GAAGwB,OAAO,CAAC,CAAC,CAAC;IACtB,IAAI,CAACvB,OAAO,GAAGuB,OAAO,CAAC,CAAC,CAAC;IACzB,IAAI,CAACtB,aAAa,GAAG,IAAI,CAACC,aAAa,GAAGqB,OAAO,CAAC,CAAC,CAAC;IACpD,IAAI,CAACH,KAAK,EAAE;EACd;CAGD;AAlEYxB,cAAc,eAL1BD,SAAS,CAAC;EACT6B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW9B,cAAc,CAkE1B;SAlEYA,cAAc","names":["Component","BoardComponent","constructor","cellService","rows","columns","numberOfMines","numberOfFlags","difficulty","cellsGame","cellsOpened","cells","numberMines","changeDifficulty","checkCell","row","column","PnumberOfFlags","flags","board","status","openCasilla","checkCasilla","flag","cell","reset","buildBoard","getDifficultys","changes","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\JUAN PABLO\\Desktop\\BuscaminasJP\\BuscaMinas\\src\\app\\board\\board.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Casilla } from '../models/Cell';\nimport { CasillaService } from '../services/Cell';\n\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent {\n  \n  board: Casilla[][] = [];\n\n  rows: number;\n  columns: number;\n  numberOfMines: number;\n  cellsGame: any;\n  difficulty: string;\n  numberOfFlags: number;\n  \n\n  constructor(private cellService: CasillaService){\n    this.rows= 5;\n    this.columns = 5;\n    this.numberOfMines = this.numberOfFlags = 0;\n    this.difficulty = \"Alevin\"\n    this.cellsGame = {cellsOpened: 0, cells: this.rows * this.columns, numberMines: this.numberOfMines};\n    this.changeDifficulty();\n  }\n\n\n  checkCell(row: number, column: number){\n    let PnumberOfFlags: any = {flags: 0};\n    if(this.board[row][column].status != 'flag'){\n      this.cellService.openCasilla(this.board, row, column, this.rows, this.columns, this.cellsGame, PnumberOfFlags);\n      this.numberOfFlags += PnumberOfFlags.flags;\n      this.cellService.checkCasilla(this.board, row, column, this.cellsGame, this.numberOfMines);\n    }\n  }\n\n  flag(cell: Casilla){\n    this.cellService.flag(cell);\n\n    if(cell.status == 'ToOpen'){\n      this.numberOfFlags++;\n    }\n    else if(cell.status == 'flag'){\n      this.numberOfFlags--;\n    }\n\n    \n    return false;\n  }\n\n\n  reset(){\n    this.board = this.cellService.buildBoard(this.rows, this.columns, this.numberOfMines);\n    this.cellsGame = {cellsOpened: 0, cells: this.rows * this.columns, numberMines: this.numberOfMines};\n    this.numberOfFlags = this.numberOfMines;\n  }\n\n  getDifficultys() : string[]{\n    return this.cellService.getDifficultys();\n  }\n\n\n  changeDifficulty(){\n    let changes: [number, number, number] = this.cellService.changeDifficulty(this.difficulty);\n    this.rows = changes[0];\n    this.columns = changes[1];\n    this.numberOfMines = this.numberOfFlags = changes[2]; \n    this.reset();\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}